import Header from "@/components/Header";
import Image from 'next/image'
import Head from "next/head";
import React from "react";
import Link from "next/link";
import { gql } from "@apollo/client";
import { client } from "@/lib/apollo";
import { GetStaticPaths, GetStaticProps } from "next";
import { ptBR } from 'date-fns/locale/pt-BR'
import { format, } from "date-fns";
import {RichText} from "@graphcms/rich-text-react-renderer"
import {ElementNode} from "@graphcms/rich-text-types"

const GET_POST = gql`
    query GetPost($slugPost: String){
        post(where: {slug: $slugPost}) {
            id
            title
            content{
                json
                }
            author{
                name
                }
            createdAt
            coverImage{
                url
                }
            }
        }
`

interface PostProps {
    post: {
        id: string;
        title: string;
        coverImage:{
            url:string;
        };
        author:{
            name:string;
        };
        createdAt: Date;
        content:{
            json: ElementNode[]
        }
    }
}

export default ({post}: PostProps) => {
    console.log(post)
    return (
        <>
            <Head>
                <title>LucasGonzagaTech Blog</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <div className="w-full max-w-[1120px] flex flex-col mx-auto pb-12 px-4">


                <Header />

                <Link
                    className="flex w-full max-w-fit font-bold text-white hover:text-gray "
                    href="/">
                    Voltar
                </Link>

                <div className="w-full h-full flex flex-col mt-8">
                    <div className="flex w-full h-56 sm:h-80 lg:h-[392px] relative rounded-2xl overflow-hidden">
                        <Image
                            src={post.coverImage.url}
                            alt='Imagem 1'
                            fill={true}
                            style={{ objectFit: "cover" }}
                        />
                    </div>

                    <div className="flex w-full flex-col mt-4 sm:mt-8">
                        <h1 className="font-bold text-2xl sm:text-4xl lg:text-[40px] text-blue">{post.title}</h1>

                        <div className="mb-8">
                            <p className=" font-bold text-white">{post.author.name}</p>
                            <p className="text-gray text-sm">{format(new Date(post.createdAt), "dd/MM/yyyy", { locale: ptBR })}</p>
                        </div>
                        <div className="mt-4 sm:mt-8">
                            <RichText 
                            renderers={{
                                p: ({children}) => <p className="text-white text-sm sm:text-base text-justify lg:text-left mt-1">{children}</p>
                            }}
                            content={post.content.json}/>
                        </div>
                        {/* <p className="text-white text-sm sm:text-base text-justify lg:text-left mt-4 sm:mt-8"></p> */}
                    </div>

                </div>


            </div>
        </>
    );
}

export const getStaticProps: GetStaticProps = async (ctx) =>{
    const slug = ctx.params?.slug
    const { data } = await client.query({ 
        query: GET_POST, 
        variables:
        {slugPost: slug

        } 
    })

    return{
        props: {
            post: data.post
        },
        revalidate: 1 //30min
    }
}

export const getStaticPaths: GetStaticPaths = async () =>{
    return{
        paths:[],
        fallback:'blocking'
    }
}